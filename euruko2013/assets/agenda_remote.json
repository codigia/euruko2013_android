{ 
    "speakers" : [
    {
        "id" : "Matz",
        "name" : "Yukihiro 'Matz' Matsumoto",
        "title" : "Ruby Chief Architect",
        "bio" : "Yukihiro 'Matz' Matsumoto is the mastermind behind the inception of Ruby. Since 1993 he has been designing our precious jewel up to its latest 2.0 version. Meanwhile he has been working on mruby, a lightweight Ruby implementation. This summer, he will be celebrating with us the 20th anniversary of Ruby.",
        "avatar" : "http://euruko2013.codigia.com/avatar_matz.jpg"
    },
    {
        "id" : "Koichi",
        "name" : "Koichi Sasada",
        "title" : "Ruby core commiter (CRuby's VM, YARV)",
        "bio" : "Koichi knows the inside outs of the Ruby VM. He has developed YARV (Yet another Ruby VM) which became the official Ruby VM when Ruby 1.9 was released. We believe he will give lots of insights in the Ruby VM, the new performance improments in Ruby 2.0 and will hint at the future of the Ruby VM.",
        "avatar" : "http://euruko2013.codigia.com/avatar_koichi.jpg"
    },
    {
        "id" : "Klabnik",
        "name" : "Steve Klabnik",
        "title" : "Instructor & Open Source lead",
        "bio" : "Steve enjoys turning coffee into code, writing, philosophy, and physical activity. He is a contributor to many high visibility open source projects such as Sinatra, Resque, Rubinius and of course the venerable Ruby on Rails web framework. His talks are always insightful and inspiring. We shouldn't expect anything less for EuRuKo.",
        "avatar" : "http://euruko2013.codigia.com/avatar_klabnik.jpg"
    },
    {
        "id" : "Kalderimis",
        "name" : "Josh Kalderimis",
        "title" : "",
        "bio" : "Josh loves popcorn, German food, all manor of gin and tonics, talking about himself in the third person, and shipping technical debt daily! As a core member of the Travis CI team, he is helping you save yourself from your code, or at least giving you a heads up that it's failing :)",
        "avatar" : "http://www.gravatar.com/avatar/00000000000000000000000000000000"
    },
    {
        "id" : "Kelly",
        "name" : "Chris Kelly",
        "title" : "",
        "bio" : "Chris Kelly hasn't said what they hope to get out of EuRuKo 2013 yet",
        "avatar" : "http://www.gravatar.com/avatar/00000000000000000000000000000000"
    },
    {
        "id" : "Torii",
        "name" : "Yuki Torii",
        "title" : "",
        "bio" : "Yuki Torii hasn't said what they hope to get out of EuRuKo 2013 yet",
        "avatar" : "http://www.gravatar.com/avatar/c67596c92e9d161d314f69de3f05f00c"
    },
    {
        "id" : "Schito",
        "name" : "Elia Schito",
        "title" : "",
        "bio" : "I'm a long time Ruby/Rails developer, now work at Mikamai, catholic, I love my beautiful wife and wonderful children.

Never avoided a fight for injecting Ruby in a \"hostile\" environment ✌

At Euruku I expect to meet awesome people, my Ruby heroes (including Adam). I also think great material is coming in the presentations!",
        "avatar" : "http://www.gravatar.com/avatar/c82630c82a3c675d2928804f432fcf17"
    },
    {
        "id" : "Witek",
        "name" : "Grzegorz Witek",
        "title" : "Runner, programmer, language freak",
        "bio" : "Hi everyone, I'm Greg. I am a professional web developer, amateur polyglot and even more amateur runner. I live in Poznań, Poland and I work for Sponsorpay, Berlin-based startup. I like playing board games. I don't like broccoli (I don't understand why they put it in every salad I buy).

Every year I try to set some goals to reach. In 2013 I decided to try speaking at conferences and contributing to open source. Let's see if I can make it :)",
        "avatar" : "http://www.gravatar.com/avatar/afa6e65b91b46f3317c3d3e94e9255f2"
    },
    {
        "id" : "Smith",
        "name" : "Benjamin Smith",
        "title" : "",
        "bio" : "Benjamin Smith hasn't said what they hope to get out of EuRuKo 2013 yet",
        "avatar" : "http://www.gravatar.com/avatar/6d48d3849102b57bbc1462c0da0b3866"
    },
    {
        "id" : "Bussink",
        "name" : "Dirkjan Bussink",
        "title" : "",
        "bio" : "Dirkjan Bussink hasn't said what they hope to get out of EuRuKo 2013 yet",
        "avatar" : "http://www.gravatar.com/avatar/b012094b37ab6946c44eaa41d7828478"
    },
    {
        "id" : "Tennhard",
        "name" : "Konstantin Tennhard",
        "title" : "",
        "bio" : "I am a computer scientist who specializes in developing large scale internet applications. My main scientific interest is natural language processing. In general, I'm passionate about software design, test driven development, all sorts of modern web-technology and of course Ruby.

I'm curious to exchange and share ideas on how we as developers can leverage science to build smarter applications that provide greater user experience. In this sense, I'd especially love share my passion for natural language processing with others and discuss what we can gain from making the computer understand natural language.",
        "avatar" : "http://www.gravatar.com/avatar/689147f00c6d973fa6e1cdee6de87226"
    },
    {
        "id" : "Shaughnessy",
        "name" : "Pat Shaughnessy",
        "title" : "",
        "bio" : "I write a blog about Ruby development at patshaughnessy.net, and just self-published an eBook called Ruby Under a Microscope. When I'm not at the keyboard, I enjoy spending time with my wife and two kids. I'm also a fluent Spanish speaker and travel frequently to Spain to visit my wife's family.

Aside from learning some new things and seeing some great presentations, my real goal at EuRuKo is to meet people. I've crossed paths with so many European Rubyists on Twitter and in other places - meeting some of them in person would be fantastic.",
        "avatar" : "http://www.gravatar.com/avatar/eb5382b137146b381dd13740d165d1f2"
    },
    {
        "id" : "ramírez",
        "name" : "Javier Ramírez",
        "title" : "",
        "bio" : "EuRuKo is by far my favourite Ruby conference. It's refreshing to see rubyists from all over Europe get together and celebrate Matz's creation by talking about Ruby, sharing their knowledge and having a great time. The array of speakers and the diversity of subjects never ceases to amaze me.

What do I hope to get out of EuRuKo 2013? well.. I just want to be a part of it :)",
        "avatar" : "http://www.gravatar.com/avatar/64daf88568a1db6a39dc9e6657e3e095"
    },
    {
        "id" : "Anynines",
        "name" : "Anynines.com",
        "title" : "",
        "bio" : "I'd love to talk with other Ruby people and exchange experience, find new friends and have fun.",
        "avatar" : "http://www.gravatar.com/avatar/00000000000000000000000000000000"
    },
    {
        "id" : "Bovensiepen",
        "name" : "Daniel Bovensiepen",
        "title" : "",
        "bio" : "During daytime Daniel is building Metros all around the world and empowers Ruby in areas nobody would expect it. At night he is contributing to mruby to push it to even more areas of his daily job.",
        "avatar" : "http://www.gravatar.com/avatar/00000000000000000000000000000000"
    }
],

"agenda" : [
    {
        "start" : 1372397400,
        "end" : 1372401000,
        "title" : "Registration",
        "descr" : ""
    },
    {
        "start" : 1372401000,
        "end" : 1372402800,
        "title" : "Welcome, info, plan",
        "descr" : ""
    },
    {
        "start" : 1372402800,
        "end" : 1372406400,
        "speaker_id" : "Matz",
        "title" : "Keynote",
        "descr" : ""
    },
    {
        "start" : 1372406400,
        "end" : 1372409100,
        "speaker_id" : "Kalderimis",
        "title" : "No one plans for complexity, and neither should you!",
        "descr" : "<p>Great ideas start small, hell, just look at all the great services we use today, all of them small ideas which grew, and grew, and grew.</p>

<p>Do you think they planned for this level of scale from the outset? God no! And why would they? Planning too early can be the death of such a great idea!</p>

<p>The mantra is simple, start small, growth will come naturally.</p>

<p>That might sound stupid, but the idea is solid. As your product grows you will learn where the bottlenecks are, where the pain points in code and processing exist, and what needs to scale and what needs to be thrown out the door.</p>

<p>Travis CI was no different, started as a simple Rails app, it has now grown into a platform built upon over 9 different apps, using everything from Postgres, Redis, RabbitMQ, Memcached, S3, BlueBox, MRI, JRuby, Websockets, and a huge array of services helping with email, metrics, and alerts.</p>

<p>We never designed or planned for this, this came about from natural growth, and we have only just started.</p>

<p>This talk is a story of architecture, complexity, and growth, as well as a candid look on what we did wrong and could have done better.</p>

<p>And most importantly, this is a talk about how sometimes <strong>not</strong> building something is more important than building it in the first place.</p>"
    },
    {
        "start" : 1372409100,
        "end" : 1372410000,
        "title" : "Break",
        "descr" : ""
    },
    {
        "start" : 1372410000,
        "end" : 1372412700,
        "speaker_id" : "Witek",
        "title" : "... but we had to kill Unicorns",
        "descr" : "<p>How often do you have to leave your comfort zone? How often does it happen that you need to change the fundamentals of your application?</p>

<p>Well… it has happened to my team recently. We had to abandon our way of thinking about Ruby on Rails applications. Single-threaded servers were not a choice anymore, neither was JRuby nor Event Machine. And we had to handle up to 200k requests per minute.</p>

<p>This talk is a case study about how, step by step, we got to multi threaded RoR application with MRI 1.9, MySQL, DataMapper. I want to present how we came to the solution, what did we have to do to make our application thread safe, how did we manage to use threads in MRI and what we learned while working on the big feature, that made us change the fundamentals of our application.</p>

<p>Although the application in this case was built with Ruby on Rails, the talk won't be specific to this framework. I want to talk about threading and parallelism in Ruby and its open source libraries, as well as the process of making deep changes in the application that handles pretty big traffic.</p>"
    },
    {
        "start" : 1372412700,
        "end" : 1372415400,
        "speaker_id" : "Kelly",
        "title" : "Down the rb_newobj() Rabbit Hole: Garbage Collection and a Glimpse into Ruby's Future",
        "descr" : "<p>Garbage collection is one of the pillars of Ruby's performance story, but getting into the inner workings of MRI's garbage collector is a bit hairy. If you want to explore the garbage collector then you're going to have to get your hands deep into C code.</p>

<p>We're going to take a walk through the C internals from Foo.new through garbage collection in Ruby's MRI. We’ll examine the idioms and optimizations in the C source and leave you feeling comfortable to explore the code yourself.</p>

<p>At the end of the rb_newobj() rabbit hole is a whole world of garbage collection. Major changes have been made in MRI's garbage collector from Ruby 1.8 through 2.0: changes intended to make Ruby more performant, changes that can capitalize on MRI's roots in UNIX. From mark-and-sweep to copy-on-write and bitmap marking, we'll see what the future of Ruby performance might look like by peering through the window of the garbage collector. </p>"
    },
    {
        "start" : 1372415400,
        "end" : 1372419000,
        "title" : "Lunch",
        "descr" : "eating"
    },
    {
        "start" : 1372419000,
        "end" : 1372422600,
        "speaker_id" : "Klabnik",
        "title" : "Keynote II",
        "descr" : "keynote!"
    },
    {
        "start" : 1372422600,
        "end" : 1372425300,
        "speaker_id" : "Smith",
        "title" : "Architecting your Rails app for success!",
        "descr" : "<p>Rails is a great framework for creating web apps... for awhile. What do you do when your codebase grows large? How do you handle large teams of developers? When performance becomes an issue, how do you scale? Most importantly, how do you write code which can easily be refactored later?</p>

<p>This is a story of a real life project built from day 1 with all these questions in mind. Learn about the problems we solved and lessons we learned: how to partition your Rails app into distinct modular engines, how to speed up your test suite by only running code effected by your changes, how to add a layer on top of ActiveRecord to enforce loose coupling, and many other patterns that can be applied to your own Rails apps!</p>"
    },
    {
        "start" : 1372425300,
        "end" : 1372426200,
        "title" : "Break",
        "descr" : ""
    },
    {
        "start" : 1372426200,
        "end" : 1372428900,
        "speaker_id" : "Bussink",
        "title" : "The future of Ruby is faster",
        "descr" : "<p>You care about your code. You write nicely factored and clean code, with nice and small methods that each do just what they are supposed to do. Maybe you worry sometimes that these additional methods and small objects can be problematic? This talk hopefully makes you stop worrying about this.</p>

<p>So with all this care that you do, what can a Ruby implementation do to make sure your code actually runs fast? In this talk I will discuss the techniques used that allow your Ruby code to execute faster. How do we make sure calling a method is cheap or even free? How can we let you mostly get away with allocating a lot of objects? How do we make iterating with .each as fast as a while loop?</p>

<p>Different techniques will be discussed, such as inline caches, just in time compilation, method / block inlining and better garbage collection. As a Rubinius contributor I've worked on all these subjects so I know a few things about these topics, but these will explained such that any Ruby developer can understand how these optimizations work.</p>

<p>The quest for a faster Ruby is happening in a lot of places and you can learn how this is done!</p>"
    },
    {
        "start" : 1372428900,
        "end" : 1372431600,
        "speaker_id" : "Tennhard",
        "title" : "Natural Language Processing with Ruby",
        "descr" : "<p>Natural Language Processing (NLP) is the art and science of making sense of user-generated data. It is a <em>combination of state-of-the-art computer science techniques and linguistics</em>. Being able to analyze plain text data allows us to gain a lot of insights. Popular NLP tasks are <em>text summarization</em>, <em>keyword extraction</em> or <em>automatic extraction of the author's opinion</em> from a text. In the age of social media, only NLP provides solutions to analyze what users are really care about. Companies such as Google or Facebook invest millions in NLP solutions to harvest information from all the data they have been gathering over the years.</p>

<p>In this talk, I will present you a <em>real-world NLP problem</em>. We will discuss this problem from both, the linguistic and the computer science perspective. Throughout the talk, <em>we will develop a processing pipeline</em> to efficiently solve this problem in an automated fashion. An NLP pipeline usually consists of multiple components, each solving one aspect of the problem and presenting its own challenges. Among other things, you will learn how to tackle the following essential NLP problems <em>using JRuby and OpenNLP</em>:</p>

<ul>
<li>Sentence segmentation,</li>
<li>Tokenization,</li>
<li>Part-of-speech tagging, and</li>
<li>Named entity recognition.</li>
</ul>"
    },
    {
        "start" : 1372431600,
        "end" : 1372433400,
        "speaker_id" : "Shaughnessy",
        "title" : "Functional Programming and Ruby",
        "descr" : "<p>While Ruby is object oriented and imperative, it does have some features that allow for functional programming. In this talk we’ll compare Haskell, a functional programming language, with Ruby while exploring these common functional patterns: higher order functions, lazy evaluation, and memoization.</p>

<p>Along the way we’ll explore how Ruby works internally, find out whether it’s a true functional language, and zoom in to take a close look at Ruby 2.0’s implementation of the new “Enumerator::Lazy” feature.</p>"
    },




    {
        "start" : 1372489200,
        "end" : 1372492800,
        "speaker_id" : "Matz",
        "title" : "Keynote III",
        "descr" : "The third keynote!"
    },
    {
        "start" : 1372492800,
        "end" : 1372495500,
        "speaker_id" : "ramírez",
        "title" : "Fun with Ruby and Redis",
        "descr" : "<p>All the cool cats are using Redis, and with a reason: It's fast, it's robust, it's easy and it's web scale. Put it together with Ruby and it's fun too!</p>

<p>In this session I will talk about what is redis, what you can do with it, how you can use it from Ruby, why you should be using it already and some common patterns when dealing with it. I will talk about:</p>

<ul>
<li>what REALLY FAST means </li>
<li>Redis data structures, and mapping them to Ruby objects</li>
<li>queuing slow ruby operations with Resque and Sidekiq</li>
<li>using redis for cross-language development</li>
<li>atomic counters and generating sequences</li>
<li>dealing with temporary data in your application</li>
<li>redis as a cache</li>
<li>shared sessions (rack-based) with redis</li>
<li>how to store relational data in a non relational data store</li>
<li>interesting problems when distributing your application. Using Lua scripting for atomic operations </li>
<li>reducing your memory footprint via compression</li>
</ul>"
    },
    {
        "start" : 1372495500,
        "end" : 1372496400,
        "title" : "Break",
        "descr" : ""
    },
    {
        "start" : 1372496400,
        "end" : 1372499100,
        "speaker_id" : "Torii",
        "title" : "How Rails helps people understand new idea? - A case study on exporting local culture with Rails application",
        "descr" : "<p>There are many interesting local cultures in the world, but it is 
difficult to introduce such cultures to other people. 
Rails application can reduce such difficulty using some tips. </p>

<p>Our experience is introduction of Japanese 'Kukai' to French 
students. Kukai is a game to enjoy Haiku, short Japanese poetry. In 
Kukai, attendees score each Haikus and comments by each other. We 
developed a Kukai Rails application and this system used by a lecture at 
a French school. The lecture was well-received.
To develop our Kukai system, Internationalisation (i18n) 
is easy to support using Rails framework.</p>

<p>In this talk, we show our experience and key points of transferring one 
local culture to other cultures using Rails web application.</p>"
    },
    {
        "start" : 1372499100,
        "end" : 1372501800,
        "speaker_id" : "Anynines",
        "title" : "Look behind the scenes of a PaaS",
        "descr" : "<p>Have you ever thought about what is going on behind the scenes of a platform as a service?</p>

<p>Learning about the nature of PaaS will help you to better adapt your apps for the operation on such an infrastructure.</p>

<p>In this talk we will go through the major challenges of building a large distributed service oriented architecture to
easily deploy applications of different languages binding dynamically to multiple services.</p>

<p>Learn about the basic building blocks of such a system and see what these services do and how they interoperate.</p>

<p>Get a glance at how to implement self-configuration, self-healing and scalability while being language and version control agnostic.</p>

<p>All done in the beloved Ruby language. All open source. Ready to be discovered and improved.</p>"
    },
    {
        "start" : 1372501800,
        "end" : 1372505400,
        "title" : "Lunch",
        "descr" : "eating"
    },
    {
        "start" : 1372505400,
        "end" : 1372509000,
        "speaker_id" : "Klabnik",
        "title" : "Keynote IV",
        "descr" : "The forth Keynote!"
    },
    {
        "start" : 1372509000,
        "end" : 1372511700,
        "speaker_id" : "Bovensiepen",
        "title" : "Shrink To Grow",
        "descr" : "<p>Ruby has grown in the last 20 years. The feature-set and field of usage has increased. But also the code-size has reached an exceptional size. For many systems Ruby is nowadays to large.</p>

<p>To reach new systems we have to re-think the way we implement Ruby. We have to shrink Ruby to be able to grow into a new field with an army of small devices.</p>

<p>This talk will cover the development of mruby. The current state of the implementation and the reason why you should contribute to it.</p>

<p>Remarkable Key Points of this Talk:</p>

<ul>
<li>presenting my hack to run mruby on an official Arduino</li>
<li>analyse real-time behavior of mruby</li>
<li>mruby on iPhone and Android</li>
<li>modifing mruby source to your own needs</li>
</ul>

<p>Matz will support the Q&amp;A session of this talk!</p>"
    },
    {
        "start" : 1372511700,
        "end" : 1372512600,
        "title" : "Break",
        "descr" : ""
    },
    {
        "start" : 1372512600,
        "end" : 1372515300,
        "speaker_id" : "Schito",
        "title" : "Opal, get back at doing Ruby on your browser ☺",
        "descr" : "<p><img src=\"https://f.cloud.github.com/assets/1051/343869/0d2f31d2-9ded-11e2-9848-553e0b8e4232.png\"></p>

<p><a href=\"http://opalrb.org\">Opal</a> is a production ready Ruby-to-Javascript compiler. In this presentation I will talk on how Ruby can be used to build awesome code for the browser. Keep applying all of your OO design skills having less context switch and increasing happiness!</p>

<p>This presentation will cover:</p>

<ul>
<li>a general overview and why I feel so good doing Ruby on the client</li>
<li><em>some</em> internals along explanation of implementing choices</li>
<li>real world (™) use cases (including code ported from the server to the browser)</li>
<li>fun! :-D</li>
</ul>

<p><br>
<br>
<br>
<br></p>

<p>I think it's still time for a general presentation of Opal, but if anyone feels otherwise I'm open to feedback. 
Here are some alternative (additional?) topics that would be fun to present:</p>

<ul>
<li>re-implementing Rack and Sinatra on Node.js in Ruby</li>
<li>using Opal objects and methods from Javascript/CoffeeScript</li>
<li>testing native Javascript with Opal Spec</li>
<li>Vienna, the Ruby client MVC</li>
</ul>"
    },
    {
        "start" : 1372515300,
        "end" : 1372518000,
        "speaker_id" : "Koichi",
        "title" : "Closing & Vote",
        "descr" : "light!"
    }
]
}

